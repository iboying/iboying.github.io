<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[input 和 textarea 的区别并用 div 模拟 textarea]]></title>
      <url>/2017/11/03/div_to_textarea/</url>
      <content type="html"><![CDATA[<p>最近看到不少类似的小实践，总是乍一看很简单，仔细一想又感觉不能很系统的表达出来，看来纸上得来终觉浅、绝知此事要躬行啊。<br><a id="more"></a></p>
<h2 id="一、input-和-textarea-的区别"><a href="#一、input-和-textarea-的区别" class="headerlink" title="一、input 和 textarea 的区别"></a>一、input 和 textarea 的区别</h2><h3 id="input："><a href="#input：" class="headerlink" title="input："></a>input：</h3><blockquote>
<p>HTML <code>&lt;input&gt;</code> 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">  Write something here</div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="textarea："><a href="#textarea：" class="headerlink" title="textarea："></a>textarea：</h3><blockquote>
<p>HTML <code>&lt;textarea&gt;</code> 元素代表一个多行的纯文本编辑控件.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"range"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">step</span>=<span class="string">"10"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"month"</span> <span class="attr">name</span>=<span class="string">"month"</span> <span class="attr">value</span>=<span class="string">"2017-11"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol>
<li><code>&lt;textarea&gt;</code>标签是成对的，有结束标签进行闭合，标签的内容写在标签对中间；<code>&lt;input&gt;</code>是单个标签，标签的内容通过 <code>value</code> 属性设置；</li>
<li><code>&lt;textarea&gt;</code>的值是纯文本；<code>&lt;input&gt;</code>的值根据类型不同而不同；</li>
<li><code>&lt;textarea&gt;</code>没有<code>type</code>属性；<code>&lt;input&gt;</code>有多种<code>type</code>来满足表单与用户的数据交互；</li>
<li><code>&lt;textarea&gt;</code>的值可以是多行的，并且有<code>rows</code>和<code>cols</code>来控制多行结构；<code>&lt;input&gt;</code>的值是单行的；</li>
</ol>
<h2 id="一、用-div-模拟-textarea-标签"><a href="#一、用-div-模拟-textarea-标签" class="headerlink" title="一、用 div 模拟 textarea 标签"></a>一、用 div 模拟 textarea 标签</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol>
<li>给 div 添加一个HTML全局属性：<code>contenteditable=&quot;true&quot;</code>，使 div 元素变成用户可编辑的;</li>
<li>给 div 添加样式 <code>resize: vertical;</code>，使 div 可以被用户调整尺寸，注意：别忘了设置 <code>overflow: auto;</code> 样式，因为<code>resize</code>样式不适用于<code>overflow: visible;</code>的块，不然 <code>resize</code> 不起效哦；</li>
<li>增加一个属性：<code>placeholder=&quot;I am placeholder&quot;</code>；</li>
<li>通过 CSS 选择器获取并显示 placeholder 的值；</li>
</ol>
<h3 id="直接上代码："><a href="#直接上代码：" class="headerlink" title="直接上代码："></a>直接上代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"textarea"</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span> <span class="attr">placeholder</span>=<span class="string">"This is placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.textarea</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#888</span>;</div><div class="line">  <span class="attribute">resize</span>: vertical;</div><div class="line">  <span class="attribute">overflow</span>: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.textarea</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(placeholder);</div><div class="line">  <span class="attribute">color</span>: <span class="number">#bbb</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，其实我看起来很简单的一个实例，总结起来，也花了一些时间，知行合一，不是那么简单的，如果大家有任何疑问，强烈欢迎交流。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[用Hexo+Github创建博客站点]]></title>
      <url>/2016/05/12/create_blog_with_hexo/</url>
      <content type="html"><![CDATA[<p>第一篇博客，如果不写一个怎么搭建的博客，感觉有点对不起这个博客站点，除了自己搭建博客站点外，现在的可选择的博客网站有很多，比如现在比较火的简书<a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a>，而我打算自己用Hexo+Github搭建一个。<br><a id="more"></a></p>
<h2 id="一、Hexo-——-快速、简洁且高效的博客框架"><a href="#一、Hexo-——-快速、简洁且高效的博客框架" class="headerlink" title="一、Hexo —— 快速、简洁且高效的博客框架"></a>一、<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo —— 快速、简洁且高效的博客框架</a></h2><h3 id="1、按照官方的指导，依次执行即可搭建一个Hexo默认的博客网站"><a href="#1、按照官方的指导，依次执行即可搭建一个Hexo默认的博客网站" class="headerlink" title="1、按照官方的指导，依次执行即可搭建一个Hexo默认的博客网站"></a>1、按照官方的指导，依次执行即可搭建一个Hexo默认的博客网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h3 id="2、博客搭建好了，剩下的就是写作了"><a href="#2、博客搭建好了，剩下的就是写作了" class="headerlink" title="2、博客搭建好了，剩下的就是写作了"></a>2、博客搭建好了，剩下的就是写作了</h3><h4 id="新建一篇文章："><a href="#新建一篇文章：" class="headerlink" title="新建一篇文章："></a>新建一篇文章：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>使用一些支持Markdown语法的编辑器写下自己的博客内容，比我使用的是<a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb</a>。<br>更多信息: <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">写作</a></p>
<h4 id="启动服务，访问查看博客效果"><a href="#启动服务，访问查看博客效果" class="headerlink" title="启动服务，访问查看博客效果"></a>启动服务，访问<localhost:4000>查看博客效果</localhost:4000></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">服务器</a></p>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>这步，Hexo会按照主题把写好的文档解析成静态网页到<code>public</code>文件夹下。<br>更多信息: <a href="https://hexo.io/zh-cn/docs/generating.html" target="_blank" rel="external">生成器</a></p>
<h4 id="部署你的静态博客"><a href="#部署你的静态博客" class="headerlink" title="部署你的静态博客"></a>部署你的静态博客</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>这步，会按照配置文件中你配置的部署地址进行部署。<br>更多信息: <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">部署</a></p>
<h2 id="二、使用第三方主题"><a href="#二、使用第三方主题" class="headerlink" title="二、使用第三方主题"></a>二、使用第三方主题</h2><p>这里我使用的主题是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a>，鉴于这个主题的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官方文档</a>十分完备且友好，我这里就不赘述了，直接按照文档走，就能轻松使用这个主题了。</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
